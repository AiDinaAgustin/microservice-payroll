name: Production CI Pipeline

permissions:
  contents: read

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy Project Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: "auth/,employee/,payroll/,gateway/,compose-traefik.yaml"
          target: "/home/${{ secrets.PROD_SSH_USER }}/microservice-payroll"
          strip_components: 0

      - name: Stop Existing Services and Free Port 81
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.PROD_SSH_USER }}/microservice-payroll
            echo "Stopping Docker services..."
            
            # Force remove all containers in the project
            docker compose -f compose-traefik.yaml down --remove-orphans || true
            
            # Find and forcibly remove ANY container using port 81
            PORT_CONTAINER=$(docker ps -q --filter "publish=81")
            if [ -n "$PORT_CONTAINER" ]; then
              echo "Forcing removal of containers using port 81..."
              docker rm -f $PORT_CONTAINER || true
            fi
            
            # Double-check if port 81 is still in use by any process
            echo "Checking if port 81 is still in use by other processes..."
            for CMD in "lsof -i:81 -t" "ss -tlnp | grep ':81 ' | awk '{print \$6}' | cut -d= -f2 | cut -d, -f1" "netstat -tlnp 2>/dev/null | grep ':81 ' | awk '{print \$7}' | cut -d/ -f1"; do
              PORT_PROCESS=$(eval $CMD 2>/dev/null) || true
              if [ -n "$PORT_PROCESS" ]; then
                echo "Found process $PORT_PROCESS using port 81. Attempting to kill..."
                sudo kill -9 $PORT_PROCESS 2>/dev/null || true
              fi
            done
            
            echo "Waiting for port 81 to be completely released..."
            sleep 10
            
            # Final verification
            if lsof -i:81 -t || ss -tlnp | grep ':81 ' > /dev/null || netstat -tlnp 2>/dev/null | grep ':81 ' > /dev/null; then
              echo "⚠️ WARNING: Port 81 is still in use after cleanup attempts"
              echo "Checking what is using port 81..."
              sudo lsof -i:81 || ss -tlnp || netstat -tlnp
            else
              echo "✅ Port 81 is free and ready to use"
            fi

      - name: Deploy Stack with Docker Compose
        uses: cssnr/stack-deploy-action@v1
        with:
          name: 'microservice-payroll'
          file: 'compose-traefik.yaml'
          host: ${{ secrets.PROD_SSH_HOST }}
          user: ${{ secrets.PROD_SSH_USER }}
          ssh_key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          mode: compose
          args: '--build --force-recreate --remove-orphans'
          summary: true

      - name: Verify Services
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.PROD_SSH_USER }}/microservice-payroll
            
            # Give services time to start properly
            echo "Waiting for services to stabilize..."
            sleep 10
            
            # Show container status
            echo "Container status:"
            docker ps --format "{{.Names}}: {{.Status}}"
            
            # Verify all critical services are running
            for service in traefik gateway auth employee payroll; do
              if docker ps | grep -q "microservice-payroll[-_]$service"; then
                echo "✅ $service service is running"
              else
                echo "❌ $service service failed to start"
                docker logs microservice-payroll-$service-1 2>&1 || true
                exit 1
              fi
            done
            
            echo "All services started successfully!"